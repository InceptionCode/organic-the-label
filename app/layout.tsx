import type { Metadata } from 'next';
import { Geist, Geist_Mono } from 'next/font/google';
import { Inter } from 'next/font/google';
import { Header } from '@/app/components/header';
import { Footer } from '@/app/components/footer';
import '@/app/styles/globals.css';
import { AuthStoreProvider } from '../store/auth-context';

/* Global State
- Because layout runs for every route. The store providers will wrap the main content here.
- We grab all necessary state from the correct server actions/requests and pass it down to the client providers.

** The auth context/store should have a set * get method that checks the user's session ttl. If invalid call the getAuth server action to refresh auth store data.**
** Every auth action (updating user info, updating user preferences, logging in and out) should update the auth store.
** @/lib/store will hold all helpers, hooks, stores and everything global state related. The provider placed here and synced
** Route level state will use the context API (things only global for the page and sub pages)
** Component level will simply useState
*/

/* CSS & Component Library

- Figure out how to implement a CSS library and setup with theming using:
  -> Tailwind
  -> Headlessui
  -> Radix-ut
  -> shadcn-ui
  -> Postcss

  After doing that and hooking everything go ahead and fully design the initial pages and UI/UX
  - INCLUDE LOADING STATES -
*/

/* Toast & Global dialog/popup messages 

- Figure out the design/strategy on how to handle toast messages and other alerts throughout the client

*/

const inter = Inter({ subsets: ['latin'] });

const geistSans = Geist({
  variable: '--font-geist-sans',
  subsets: ['latin'],
});

const geistMono = Geist_Mono({
  variable: '--font-geist-mono',
  subsets: ['latin'],
});

export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
};

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en">
      <body
        className={`${inter.className} ${geistSans.variable} ${geistMono.variable} antialiased bg-black text-white min-h-screen flex flex-col`}
      >
        <AuthStoreProvider>
          <Header />
          <main className="flex-1 px-4 md:px-12 py-8 max-w-7xl mx-auto w-full">{children}</main>
          <Footer />
        </AuthStoreProvider>
      </body>
    </html>
  );
}
