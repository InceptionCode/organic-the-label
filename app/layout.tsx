import type { Metadata } from 'next';

import { Header } from '@/app/components/header';
import { Footer } from '@/app/components/footer';
import '@/app/styles/globals.css';
import { AuthStoreProvider } from '../store/auth-context';
import { getUserAction } from './api/auth/get-user';
import { User } from '@/lib/schemas';
import { defaultUserState } from '@/lib/store/authStore';
import { ThemeProvider } from '@/ui-components/theme-provider';

import { inter, geistSans, geistMono } from '@/lib/font-tags';

/* Global State
- Because layout runs for every route. The store providers will wrap the main content here.
- We grab all necessary state from the correct server actions/requests and pass it down to the client providers.

** The auth context/store should have a set * get method that checks the user's session ttl. If invalid call the getAuth server action to refresh auth store data.**
** Every auth action (updating user info, updating user preferences, logging in and out) should update the auth store.
** @/lib/store will hold all helpers, hooks, stores and everything global state related. The provider placed here and synced
** Route level state will use the context API (things only global for the page and sub pages)
** Component level will simply useState
*/

/* CSS & Component Library

- Figure out how to implement a CSS library and setup with theming using:
  -> Tailwind: CSS
  -> Headlessui: Additional ui-components (optional and should be used last)
  -> Radix-ui: No Radix its too large and basically a component-library. REMOVE ALL RADIX
  -> shadcn-ui: UI Theming and primitives
  -> Postcss: For dynamic CSS in JS

  After doing that and hooking everything go ahead and fully design the initial pages and UI/UX
  - INCLUDE LOADING STATES -
*/

/* Toast & Global dialog/popup messages 

- Figure out the design/strategy on how to handle toast messages and other alerts throughout the client

*/

export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
};

export default async function RootLayout({ children }: { children: React.ReactNode }) {
  const userActionState: Awaited<ReturnType<typeof getUserAction>> = await getUserAction();
  const initialUser: User = userActionState.user ?? defaultUserState;

  return (
    <html lang="en" suppressHydrationWarning>
      <body
        className={`${inter.className} ${geistSans.variable} ${geistMono.variable} antialiased bg-black text-white min-h-screen flex flex-col`}
      >
        <AuthStoreProvider initialUser={initialUser}>
          <ThemeProvider
            attribute="class"
            defaultTheme="dark"
            enableSystem
            disableTransitionOnChange
          >
            <Header />
            <main className="flex-1 px-4 md:px-12 py-8 max-w-7xl mx-auto w-full">{children}</main>
            <Footer />
          </ThemeProvider>
        </AuthStoreProvider>
      </body>
    </html>
  );
}
